# Lara's Personal Training Platform - Development Roadmap

## Phase 1: Foundation & Core Architecture (The Path Out of Paralysis)

- [ ] **Step 1: Solidify Data Layer & Code Quality**
    - [ ] **A. TDD:** Finish implementing all methods in `DynamoDbUserRepo` (e.g., `update`, `getById`).
    - [ ] Create a separate suite of **integration tests** for the `DynamoDbUserRepo` that connect to the local Dockerized DynamoDB.
    - [ ] Ensure existing use case **unit tests** continue to use the fast `InMemory` repositories.
    - [ ] **B. Code Quality:** Integrate `ESLint` for linting and `Prettier` for code formatting to ensure a professional and consistent codebase.

- [ ] **Step 2: Implement Foundational Services & Security**
    - [ ] **A. Centralized Configuration:** Create a `src/config.ts` module to load, validate, and provide all environment variables.
    - [ ] **B. Global Error Handling:** Implement a centralized error-handling middleware in Express for consistent JSON error responses.
    - [ ] **C. Input Validation:** Implement a strategy for validating all incoming API data (e.g., using a library like Zod or Joi) as a primary security measure.
    - [ ] **D. Health Check:** Add a `/health` endpoint to monitor the application's status and database connectivity.

- [ ] **Step 3: Decouple Web Framework**
    - [ ] Create a generic `HttpServer` interface (port) with methods like `on()` and `listen()`.
    - [ ] Create an `ExpressAdapter` that implements the `HttpServer` interface.
    - [ ] Refactor `src/main.ts` to use the adapter, cleanly separating the application from Express.

- [ ] **Step 4: Implement IoC Container**
    - [ ] Integrate a library like `InversifyJS` to manage dependency injection.
    - [ ] Define bindings for all dependencies (e.g., `UserRepository`).
    - [ ] Refactor the application to resolve dependencies from the IoC container.

- [ ] **Step 5: Implement Core User Features & Security**
    - [ ] Create the `UserLogin` and `RefreshToken` use cases.
    - [ ] Implement JWT-based authentication middleware to protect routes.
    - [ ] **Security:** Implement rate limiting on authentication and other sensitive endpoints to prevent abuse.

- [ ] **Step 6: Enhance Observability and Documentation**
    - [ ] **Observability:** Implement a structured logging library (e.g., Winston or Pino).
    - [ ] **API Documentation:** Integrate Swagger or a similar tool to automatically generate API documentation.
    - [ ] **Tracing:** Implement distributed tracing using OpenTelemetry (can be deferred if needed).

## Phase 2: Admin & User Functionality (Backend)

- [ ] **1. Admin Dashboard:**
    - [ ] Create a `GetAllClients` use case.
    - [ ] Create a `GetClientById` use case.
    - [ ] Create a `CreateTrainingSession` use case for a specific client.
    - [ ] Create an `UpdateTrainingSession` use case.
    - [ ] Create a `DeleteTrainingSession` use case.
    - [ ] Implement role-based access control (RBAC) to protect admin routes.

- [ ] **2. Client Dashboard:**
    - [ ] Create a `GetMyProfile` use case.
    - [ ] Create a `GetMyTrainingSessions` use case.
    - [ ] Create a `GetMyActivePlan` use case.
    - [ ] Create a `GetMyPastPlans` use case.
    - [ ] Create a `SubmitParq` use case.
    - [ ] Create an `UpdateClientPersonalInfo` use case.

## Phase 3: Video Content (Backend)

- [ ] **1. Video Upload & Processing:**
    - [ ] Create a `GeneratePresignedUrl` use case for secure video uploads to S3.
    - [ ] Implement a Lambda function to process uploaded videos (e.g., transcode to different resolutions).
    - [ ] Create a `SaveVideoMetadata` use case to save video information to DynamoDB.

- [ ] **2. Video Streaming:**
    - [ ] Create a `GetVideoStream` use case that returns a streaming URL (e.g., from CloudFront).
    - [ ] Implement a `GetAllVideosByCategory` use case.
    - [ ] Implement a `SearchVideos` use case.

## Phase 4: Payments & Subscriptions (Backend)

- [ ] **1. Payment Gateway Integration:**
    - [ ] Choose and integrate a payment gateway (e.g., Stripe or Paddle).
    - [ ] Create a `CreateCheckoutSession` use case.
    - [ ] Implement a webhook to handle successful payments and create user subscriptions.

- [ ] **2. Subscription Management:**
    - [ ] Create a `CancelSubscription` use case.
    - [ ] Create a `GetMySubscription` use case.
    - [ ] Implement a mechanism to check for active subscriptions and restrict access to content.

## Phase 5: Frontend Development

- [ ] **1. Landing Page:**
    - [ ] Create the main landing page showing available plans.
    - [ ] Integrate the payment gateway to handle plan purchases.

- [ ] **2. User Authentication:**
    - [ ] Create the user registration and login pages.
    - [ ] Implement the PARQ form for new users.

- [ ] **3. Client Dashboard:**
    - [ ] Create the main dashboard with the video carousel.
    - [ ] Implement the profile page showing training sessions and plan details.

- [ ] **4. Admin Dashboard:**
    - [ ] Create the admin dashboard to manage clients and training sessions.

## Phase 6: Production Readiness & CI/CD

- [ ] **1. Containerization:**
    - [ ] Create a `Dockerfile` for the frontend application.
    - [ ] Update the `docker-compose.yaml` to include the frontend service.

- [ ] **2. CI/CD Pipeline:**
    - [ ] Set up a CI/CD pipeline (e.g., using GitHub Actions) to automatically build, test, and deploy the application.
    - [ ] Deploy the backend and frontend to a cloud provider (e.g., AWS ECS or Vercel).

- [ ] **3. Production Operations:**
    - [ ] **Secrets Management:** Plan for production secrets management (e.g., AWS Secrets Manager) instead of .env files.
    - [ ] **Graceful Shutdown:** Implement graceful shutdown logic in the server to handle deployments smoothly.
    - [ ] **Monitoring & Alerting:** Set up monitoring dashboards (e.g., using CloudWatch or Grafana) to track application performance and health.
    - [ ] Configure alerts to notify you of any issues.

## Phase 7: Backend Processes (No direct routes)

- [ ] **1. Plan Management:**
    - [ ] Create an `ExpireUserPlan` use case to move expired plans to the past plans list.
    - [ ] Set up a scheduled job to run the `ExpireUserPlan` use case daily.

## Phase 8: Future-Proofing & Advanced Testing

- [ ] **1. API Evolution:**
    - [ ] Plan and implement an API versioning strategy (e.g., `/api/v1/...`).
- [ ] **2. Advanced Testing:**
    - [ ] Plan and implement End-to-End (E2E) tests to simulate full user journeys.
